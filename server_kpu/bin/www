// Module dependencies.
const app = require('../app');
const debug = require('debug')('server-kpu:server');
const http = require('http');

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '82');
app.set('port', port);

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.log('[EXPRESS_APP-%s] \x1b[95m%s\x1b[0m With Port \x1b[35m%s\x1b[0m Requires Elevated Privileges ü§ê', error.code, error.address, error.port);
      process.exit(1);
    case 'EADDRINUSE':
      console.log('[EXPRESS_APP-%s] \x1b[95m%s\x1b[0m With Port \x1b[35m%s\x1b[0m Is Already In Use ü§ê', error.code, error.address, error.port);
      server.listen(0, '0.0.0.0');
      break;
    default:
      throw error;
  }
}

// Create HTTP server.
const server = http.createServer(app);

// Event listener for HTTP server "listening" event.
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log('[EXPRESS_APP-LISTEN] Server Started On \x1b[95m%s\x1b[0m:\x1b[35m%s\x1b[0m ü§ê', addr.address, addr.port);
}

// Listen on provided port, on all network interfaces.
server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);
